{"ast":null,"code":"import { useState } from 'react';\nimport html2canvas from 'html2canvas';\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n/**\n * @module Main_Hook\n * Hook return\n * @typedef {Array} HookReturn\n * @property {string} HookReturn[0] - image string\n * @property {string} HookReturn[1] - take screen shot string\n * @property {object} HookReturn[2] - errors\n */\n\n/**\n * hook for creating screenshot from html node\n * @returns {HookReturn}\n */\n\nvar useScreenshot = function useScreenshot() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    type = _ref.type,\n    quality = _ref.quality;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    image = _useState2[0],\n    setImage = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  /**\n   * convert html node to image\n   * @param {HTMLElement} node\n   * @param {Options} html2canvas options\n   */\n\n  var takeScreenShot = function takeScreenShot(node) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!node) {\n      throw new Error('You should provide correct html node.');\n    }\n    return html2canvas(node, options).then(function (canvas) {\n      var croppedCanvas = document.createElement('canvas');\n      var croppedCanvasContext = croppedCanvas.getContext('2d'); // init data\n\n      var cropPositionTop = 0;\n      var cropPositionLeft = 0;\n      var cropWidth = canvas.width;\n      var cropHeight = canvas.height;\n      croppedCanvas.width = cropWidth;\n      croppedCanvas.height = cropHeight;\n      croppedCanvasContext.drawImage(canvas, cropPositionLeft, cropPositionTop);\n      var base64Image = croppedCanvas.toDataURL(type, quality);\n      setImage(base64Image);\n      return base64Image;\n    })[\"catch\"](setError);\n  };\n  return [image, takeScreenShot, {\n    error: error\n  }];\n};\n/**\n * creates name of file\n * @param {string} extension\n * @param  {string[]} parts of file name\n */\n\nvar createFileName = function createFileName() {\n  var extension = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  if (!extension) {\n    return '';\n  }\n  for (var _len = arguments.length, names = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    names[_key - 1] = arguments[_key];\n  }\n  return \"\".concat(names.join(''), \".\").concat(extension);\n};\nexport { createFileName, useScreenshot };","map":{"version":3,"names":["useScreenshot","_ref","arguments","length","undefined","type","quality","_useState","useState","_useState2","_slicedToArray","image","setImage","_useState3","_useState4","error","setError","takeScreenShot","node","options","Error","html2canvas","then","canvas","croppedCanvas","document","createElement","croppedCanvasContext","getContext","cropPositionTop","cropPositionLeft","cropWidth","width","cropHeight","height","drawImage","base64Image","toDataURL","createFileName","extension","_len","names","Array","_key","concat","join"],"sources":["C:\\Users\\kylea\\Documents\\GIS Projects\\GEOG778\\kcrest_client\\node_modules\\use-react-screenshot\\src\\index.js"],"sourcesContent":["import { useState } from 'react'\nimport html2canvas from 'html2canvas'\n\n/**\n * @module Main_Hook\n * Hook return\n * @typedef {Array} HookReturn\n * @property {string} HookReturn[0] - image string\n * @property {string} HookReturn[1] - take screen shot string\n * @property {object} HookReturn[2] - errors\n */\n\n/**\n * hook for creating screenshot from html node\n * @returns {HookReturn}\n */\nconst useScreenshot = ({ type, quality } = {}) => {\n  const [image, setImage] = useState(null)\n  const [error, setError] = useState(null)\n  /**\n   * convert html node to image\n   * @param {HTMLElement} node\n   * @param {Options} html2canvas options\n   */\n  const takeScreenShot = (node, options = {}) => {\n    if (!node) {\n      throw new Error('You should provide correct html node.')\n    }\n    return html2canvas(node, options)\n      .then((canvas) => {\n        const croppedCanvas = document.createElement('canvas')\n        const croppedCanvasContext = croppedCanvas.getContext('2d')\n        // init data\n        const cropPositionTop = 0\n        const cropPositionLeft = 0\n        const cropWidth = canvas.width\n        const cropHeight = canvas.height\n\n        croppedCanvas.width = cropWidth\n        croppedCanvas.height = cropHeight\n\n        croppedCanvasContext.drawImage(\n          canvas,\n          cropPositionLeft,\n          cropPositionTop,\n        )\n\n        const base64Image = croppedCanvas.toDataURL(type, quality)\n\n        setImage(base64Image)\n        return base64Image\n      })\n      .catch(setError)\n  }\n\n  return [\n    image,\n    takeScreenShot,\n    {\n      error,\n    },\n  ]\n}\n\n/**\n * creates name of file\n * @param {string} extension\n * @param  {string[]} parts of file name\n */\nconst createFileName = (extension = '', ...names) => {\n  if (!extension) {\n    return ''\n  }\n\n  return `${names.join('')}.${extension}`\n}\n\nexport { useScreenshot, createFileName }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;AASA;;;;;IAIMA,aAAa,GAAG,SAAhBA,aAAgBA,CAAA,EAA4B;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAP,EAAO;IAAzBG,IAAyB,GAAAJ,IAAA,CAAzBI,IAAyB;IAAnBC,OAAmB,GAAAL,IAAA,CAAnBK,OAAmB;EAAA,IAAAC,SAAA,GACtBC,QAAQ,CAAC,IAAD,CADc;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IACzCI,KADyC,GAAAF,UAAA;IAClCG,QADkC,GAAAH,UAAA;EAAA,IAAAI,UAAA,GAEtBL,QAAQ,CAAC,IAAD,CAFc;IAAAM,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAEzCE,KAFyC,GAAAD,UAAA;IAElCE,QAFkC,GAAAF,UAAA;EAGhD;;;;;;EAKA,IAAMG,cAAc,GAAG,SAAjBA,cAAiBA,CAACC,IAAD,EAAwB;IAAA,IAAjBC,OAAiB,GAAAjB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAP,EAAO;IAC7C,IAAI,CAACgB,IAAL,EAAW;MACT,MAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;IACD;IACD,OAAOC,WAAW,CAACH,IAAD,EAAOC,OAAP,CAAX,CACJG,IADI,CACC,UAACC,MAAD,EAAY;MAChB,IAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAtB;MACA,IAAMC,oBAAoB,GAAGH,aAAa,CAACI,UAAd,CAAyB,IAAzB,CAA7B,CAFgB;;MAIhB,IAAMC,eAAe,GAAG,CAAxB;MACA,IAAMC,gBAAgB,GAAG,CAAzB;MACA,IAAMC,SAAS,GAAGR,MAAM,CAACS,KAAzB;MACA,IAAMC,UAAU,GAAGV,MAAM,CAACW,MAA1B;MAEAV,aAAa,CAACQ,KAAd,GAAsBD,SAAtB;MACAP,aAAa,CAACU,MAAd,GAAuBD,UAAvB;MAEAN,oBAAoB,CAACQ,SAArB,CACEZ,MADF,EAEEO,gBAFF,EAGED,eAHF;MAMA,IAAMO,WAAW,GAAGZ,aAAa,CAACa,SAAd,CAAwBhC,IAAxB,EAA8BC,OAA9B,CAApB;MAEAM,QAAQ,CAACwB,WAAD,CAAR;MACA,OAAOA,WAAP;IACD,CAvBI,WAwBEpB,QAxBF,CAAP;EAyBD,CA7BD;EA+BA,OAAO,CACLL,KADK,EAELM,cAFK,EAGL;IACEF,KAAK,EAALA;EADF,CAHK,CAAP;AAOD;AAED;;;;;;IAKMuB,cAAc,GAAG,SAAjBA,cAAiBA,CAAA,EAA8B;EAAA,IAA7BC,SAA6B,GAAArC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAjB,EAAiB;EACnD,IAAI,CAACqC,SAAL,EAAgB;IACd,OAAO,EAAP;EACD;EAHkD,SAAAC,IAAA,GAAAtC,SAAA,CAAAC,MAAA,EAAVsC,KAAU,OAAAC,KAAA,CAAAF,IAAA,OAAAA,IAAA,WAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAAVF,KAAU,CAAAE,IAAA,QAAAzC,SAAA,CAAAyC,IAAA;EAAA;EAKnD,UAAAC,MAAA,CAAUH,KAAK,CAACI,IAAN,CAAW,EAAX,CAAV,OAAAD,MAAA,CAA4BL,SAA5B;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}